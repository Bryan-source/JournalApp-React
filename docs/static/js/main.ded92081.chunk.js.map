{"version":3,"sources":["firebase/firebase-config.js","helpers/fileUpload.js","helpers/loadNotes.js","types/types.js","actions/notes.js","hooks/useForm.js","components/notes/NotesAppBar.js","components/notes/NoteScreen.js","components/journal/NothingSelected.js","components/journal/JournalEntry.js","components/journal/JournalEntries.js","actions/auth.js","components/journal/Sidebar.js","components/journal/JournalScreen.js","actions/ui.js","components/auth/LoginScreen.js","components/auth/RegisterScreen.js","routers/AuthRouter.js","routers/PrivateRoute.js","routers/PublicRoute.js","routers/AppRouter.js","reducers/uiReducer.js","reducers/notesReducer.js","store/store.js","reducers/authReducer.js","JournalApp.js","index.js"],"names":["firebase","initializeApp","apiKey","authDomain","projectId","storageBucket","messagingSenderId","appId","db","firestore","googleAuthProvider","auth","GoogleAuthProvider","fileUpload","file","a","formData","FormData","append","fetch","method","body","resp","ok","json","cloudResp","secure_url","loadNotes","uid","collection","get","notesSnap","notes","forEach","snapChildren","push","id","data","console","log","types","activeNote","note","type","payload","addNewNote","setNotes","startSaveNote","dispatch","getState","url","noteToFirestore","doc","update","refreshNote","Swal","fire","title","deleteNote","useForm","initializeForm","useState","formState","setFormState","reset","newFormState","handleInputChange","target","name","value","NotesAppBar","useDispatch","active","useSelector","state","className","style","display","onChange","e","files","text","allowOutsideClick","didOpen","showLoading","fileUrl","close","startUploading","document","querySelector","onClick","click","NoteScreen","formValues","activeId","useRef","useEffect","current","placeholder","autoComplete","src","alt","delete","startDeleting","NothingSelected","JournalEntry","date","noteDate","moment","backgroundSize","backgroundImage","format","JournalEntries","map","login","displayName","logout","startLoading","finishLoading","Sidebar","signOut","newNote","Date","getTime","add","JournalScreen","setError","err","removeError","LoginScreen","ui","msgError","loading","email","password","isFormValid","trim","length","validator","isEmail","onSubmit","preventDefault","signInWithEmailAndPassword","then","user","catch","message","startLoginEmailPassword","disabled","signInWithPopup","to","RegisterScreen","password2","createUserWithEmailAndPassword","updateProfile","startRegisterWithEmailPasswordName","AuthRouter","exact","path","component","PrivateRoute","isAuthenticated","Component","rest","props","PublicRoute","AppRouter","checking","setChecking","isLoggedin","setIsLoggedin","onAuthStateChanged","initialState","reducers","combineReducers","action","filter","composeEnhancers","window","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","compose","store","createStore","applyMiddleware","thunk","JournalApp","ReactDOM","render","getElementById"],"mappings":"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","file":"static/js/main.ded92081.chunk.js","sourcesContent":["import firebase from 'firebase/app';\r\nimport 'firebase/firestore';\r\nimport 'firebase/auth';\r\n\r\n// Your web app's Firebase configuration\r\nconst firebaseConfig = {\r\n    apiKey: \"AIzaSyD-bzwpDVmyvmQ8N5T6MiOwg8uvJSSOnAg\",\r\n    authDomain: \"journal-app-3de67.firebaseapp.com\",\r\n    projectId: \"journal-app-3de67\",\r\n    storageBucket: \"journal-app-3de67.appspot.com\",\r\n    messagingSenderId: \"916148077782\",\r\n    appId: \"1:916148077782:web:5dae7be3f69ce18e543577\"\r\n  };\r\n  // Initialize Firebase\r\n  firebase.initializeApp(firebaseConfig);\r\n\r\n  //data base\r\n  const db = firebase.firestore();\r\n  const googleAuthProvider = new firebase.auth.GoogleAuthProvider();\r\n\r\n  export {\r\n      db,\r\n      googleAuthProvider,\r\n      firebase\r\n  }","/* Archivos referenciados\r\n    actions/notes.js startUploading\r\n*/\r\n\r\nexport const fileUpload = async (file) => {\r\n    const cloudUrl = 'https://api.cloudinary.com/v1_1/djz1ou8km/upload';\r\n\r\n    //Datos del formData desde Postman para traer la imagen desde claudinary\r\n    const formData = new FormData();\r\n    formData.append('upload_preset', 'react-journal');\r\n    formData.append('file', file);\r\n\r\n    try {\r\n        const resp = await fetch(cloudUrl, {\r\n            //Parametros desde el PostMan\r\n            method: 'POST',\r\n            body: formData\r\n        });\r\n\r\n        if (resp.ok) {\r\n\r\n            const cloudResp = await resp.json();\r\n            //Retorna el url seguro de la imagen que se subió este url se utiliza para que se muestre la imagen en la nota\r\n            return cloudResp.secure_url;\r\n        } else {\r\n            /* Muestra un error de cloudinary */\r\n            throw await resp.json();\r\n        }\r\n    } catch (err) {\r\n        throw err;\r\n    }\r\n\r\n\r\n}\r\n\r\n","import { db } from \"../firebase/firebase-config\";\r\n\r\n/* Esta función es creada para obtener la información de las notas creadas por el usuario desde el database en firebase */\r\nexport const loadNotes = async(uid) => {\r\n\r\n    /* get() obtiene toda la información almacenada en notes */\r\n    const notesSnap = await db.collection(`${uid}/journal/notes`).get();\r\n    const notes = [];\r\n\r\n    notesSnap.forEach(snapChildren => {\r\n        notes.push({\r\n            id: snapChildren.id, \r\n            ...snapChildren.data()\r\n        })\r\n    });\r\n    console.log(notes);\r\n    return notes;\r\n}","\r\nexport const types = {\r\n\r\n    //Auth\r\n    login: '[Auth] Login',\r\n    logout: '[Auth] Logout',\r\n\r\n    //UI\r\n    uiSetError: '[UI] Set Error',\r\n    uiRemoveError: '[UI] Remove Error',\r\n    \r\n    uiStartLoading: '[UI] Start loading',\r\n    uiFinishLoading: '[UI] Finish loading',\r\n\r\n    notesAddNew: '[Notes] New note',\r\n    notesActive: '[Notes] Set active note',\r\n    notesLoad: '[Notes] Load notes',\r\n    notesUpdated: '[Notes] Updated note', /* //Actualiza las mini notas de la barra lateral*/\r\n    notesFileUrl: '[Notes] Updated image url',\r\n    notesDelete: '[Notes] Delete note',\r\n    notesLogoutCleaning: '[Notes] Logout Cleaning',\r\n\r\n}","import Swal from 'sweetalert2'\r\n\r\nimport {db} from \"../firebase/firebase-config\";\r\nimport { fileUpload } from '../helpers/fileUpload';\r\nimport { loadNotes } from \"../helpers/loadNotes\";\r\nimport { types } from \"../types/types\";\r\n\r\n/*cloudinary -> react-journal */\r\n\r\nexport const startNewNote = () => {\r\n    /* getState es un callback que funciona como useSelector ya que toma la propiedades del redux para usarlos en el código*/\r\n    return async(dispatch, getState) => {\r\n        const {uid} = getState().auth;\r\n\r\n        const newNote = {\r\n            title: '',\r\n            body: '',\r\n            date: new Date().getTime()\r\n        }\r\n\r\n        /* doc crea una colleccion nueva en la base de datos del firebase en el cual su dirección es id/journal/notes\r\n        si id/journal/notes no existe doc se encarga de crearla por primera vez desde esta instrucción */\r\n        /* siempre se requiere el uid porque es una clave única del usuario por eso la obtuvimos con getState */\r\n        const doc = await db.collection(`${uid}/journal/notes`).add(newNote);\r\n        \r\n        dispatch(activeNote(doc.id, newNote));\r\n        dispatch(addNewNote(doc.id, newNote));\r\n    }\r\n}\r\n\r\nexport const startLoadingNotes = (uid) => {\r\n    return async(dispatch) => {\r\n        const notes = await loadNotes(uid);\r\n        dispatch(setNotes(notes));\r\n    }\r\n}\r\n\r\nexport const activeNote = (id, note) => ({\r\n    type: types.notesActive,\r\n    payload: {\r\n        id,\r\n        ...note\r\n    }\r\n});\r\n\r\n/* Al crear una note, que esta aparezca automáticamente en la sección de minicards al guardar y no tener que recargar la página. */\r\nexport const addNewNote = (id, note) => ({\r\n    type: types.notesAddNew,\r\n    payload: {\r\n        id, ...note\r\n    }\r\n})\r\n\r\n/* Accion distinta */\r\nexport const setNotes = (notes) => ({\r\n    type: types.notesLoad,\r\n    payload: notes \r\n});\r\n\r\n//Recibe como argumento la note que se editó\r\nexport const startSaveNote = (note) => {\r\n    return async(dispatch, getState) => {\r\n        const {uid} = getState().auth;\r\n\r\n        //Si url es null entonces lo elimina en el firestore.\r\n        if(!note.url){\r\n            delete note.url;\r\n        }\r\n\r\n        /* delete para eliminar el id ya que este no está en la sección de note sólo es parte de la ubicación no se necesita porque ya se sabe a quien pertenece esa nota */\r\n        const noteToFirestore = { ...note };\r\n        delete noteToFirestore.id;\r\n\r\n        //Va hasta la dirección de mis notas en el firebase y lo actualiza\r\n        await db.doc(`${uid}/journal/notes/${note.id}`).update(noteToFirestore);\r\n\r\n        dispatch(refreshNote(note.id, noteToFirestore));\r\n        Swal.fire('Saved', note.title, 'success');\r\n    }\r\n}\r\n\r\n//Actualiza la nueva nota de la mini card en el panel lateral\r\nexport const refreshNote = (id, note) => ({\r\n    type: types.notesUpdated,\r\n\r\n    /* es para que la note se le sea asignado el id ya que como simple note sin {id, ...note} no le asigna uno y marca error */\r\n    payload: {\r\n        id,\r\n        note: {\r\n            id,\r\n            ...note\r\n        }\r\n    }\r\n});\r\n\r\nexport const startUploading = (file) => {\r\n    return async(dispatch, getState) => {\r\n\r\n        //getState toma del redux notes / active y active reemplaza el nombre por activeNote\r\n        //Toma la nota activa\r\n        const {active:activeNote} = getState().notes;\r\n\r\n        Swal.fire({\r\n            title: 'Uploading...',\r\n            text: 'Please wait...',\r\n            allowOutsideClick: false,\r\n            //antes de terminar va a mostrar un loading\r\n            didOpen: () => {\r\n                Swal.showLoading();\r\n            }\r\n        });\r\n\r\n        //helpers/fileUpload: devuelve el secureUrl el cual se puede ver desde PostMan\r\n        const fileUrl = await fileUpload(file);\r\n        activeNote.url = fileUrl;\r\n        \r\n        dispatch(startSaveNote(activeNote));\r\n\r\n        Swal.close();\r\n    }\r\n}\r\n\r\n//Eliminar nota\r\nexport const startDeleting = (id) => {\r\n    return async(dispatch , getState) => {\r\n        const {uid} = getState().auth;\r\n        await db.doc(`${uid}/journal/notes/${id}`).delete();\r\n        dispatch(deleteNote(id));\r\n    }    \r\n}\r\n\r\nexport const deleteNote = (id) => ({\r\n    type: types.notesDelete,\r\n    payload: id\r\n});\r\n\r\n\r\n//Purgar notas al hacer Logout\r\nexport const noteLogout = () => ({\r\n    type: types.notesLogoutCleaning\r\n})\r\n\r\n","import {useState} from 'react';\r\n\r\nexport const useForm = (initializeForm = {}) => {\r\n    \r\n    const [formState, setFormState] = useState(initializeForm);\r\n\r\n    //En este punto  reset recibe un parámetro que si no existe por default lo iguala al initializeForm, pero si existe, nos permite hacer reset y que los campos del form se llenen con un texto deseado y no vacío.\r\n    const reset = (newFormState = initializeForm) => {\r\n        setFormState(newFormState);\r\n    }\r\n    \r\n    //Este método usa e.target pero aquí desestrucramos el target para sólo usar target.elemento\r\n    //El target hace referencia al input \r\n    const handleInputChange = ({target}) => {\r\n\r\n        \r\n        //Hacemos que el value del input se almacene en su respectivo objeto tomando como referencia la propiedad de name = '' del input.\r\n        setFormState({\r\n            ...formState,\r\n            [target.name]: target.value\r\n        });\r\n    }\r\n    \r\n    return [formState, handleInputChange, reset];\r\n}","import React from 'react'\r\nimport { useDispatch, useSelector } from 'react-redux'\r\nimport { startSaveNote, startUploading } from '../../actions/notes'\r\n\r\nexport const NotesAppBar = () => {\r\n    \r\n    const dispatch = useDispatch();\r\n    const {active} = useSelector( state => state.notes );\r\n    const handleSave = () => {\r\n        \r\n        dispatch(startSaveNote(active))\r\n    }\r\n\r\n    //Button Picture \r\n    const handlePictureClick = () => {\r\n        document.querySelector('#fileSelector').click();\r\n    }\r\n\r\n    //input type: file al seleccionar una imagen de mi directorio el target hace referencia al que haya elegido con el click\r\n    const handleFileChange = (e) => {        \r\n        \r\n        const file = e.target.files[0];\r\n        if(file) {\r\n            //Sube el archivo seleccionado a cloudinary\r\n            dispatch(startUploading(file));\r\n\r\n            //Sirve para que se reinicie el input file y me permita subir la misma imagen en otra card, si este no se reinicia entonces no podría hacerlo tendría que elegir otra imagen\r\n            //El value hace referencia a la imagen actual seleccionada.\r\n            document.querySelector('#fileSelector').value = '';\r\n        }\r\n    }\r\n\r\n    return (\r\n        <div className=\"notes__appbar\">\r\n            <span>28 de agosto de 2020</span>\r\n\r\n            <div>\r\n                {/* Este input está escondido a partir del handlePictureClick el botón Picture lo llama y se comporta como un inpit tipo file */}\r\n                <input\r\n                    id = \"fileSelector\"\r\n                    name = \"file\" \r\n                    type=\"file\"\r\n                    style = {{display:'none'}}\r\n                    onChange = {handleFileChange}\r\n                />\r\n                <button \r\n                    className=\"btn\"\r\n                    onClick = {handlePictureClick}\r\n                    >\r\n                    Picture\r\n                </button>\r\n                \r\n                <button className=\"btn\" onClick={handleSave}>\r\n                    Save\r\n                </button>\r\n                \r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n","import React, { useEffect, useRef } from 'react'\r\nimport { useDispatch, useSelector } from 'react-redux'\r\nimport { activeNote, startDeleting } from '../../actions/notes';\r\nimport { useForm } from '../../hooks/useForm';\r\nimport { NotesAppBar } from './NotesAppBar'\r\n\r\nexport const NoteScreen = () => {\r\n\r\n    const dispatch = useDispatch();\r\n    //active:note significa que se está renombrando active por note\r\n    const {active:note} = useSelector( state => state.notes );\r\n    const [formValues, handleInputChange, reset] = useForm(note);\r\n\r\n    //id se utiliza para borrar la nota actualemte mostrada y que se encuentra en el active\r\n    const {id, body, title, url} = formValues;\r\n    //El useRef mantiene una referencia mutable es decir algo que va a cambiar con el tiempo, en este caso el id de la nota está cambiando frecuentemente al selecionar diferentes cards, useRef evita que se produzca algún error\r\n    const activeId = useRef(note.id);\r\n\r\n    //Este useEffect actúa para que en tiempo real se actualicen los campos del useForm para que al ir seleccionando cada card nos muestre la información respectiva conforme se seleccione en tiempo real\r\n    useEffect(() => {\r\n        \r\n        //Este useEffect sólo se ejecuta si y sólo si la note.id es diferente de la referencia que apunta el useRef de este modo se evita un ciclo infinito en la aplicación.\r\n        if (note.id !== activeId.current){\r\n            reset(note);\r\n            activeId.current = note.id \r\n       }\r\n    }, [note, reset])\r\n\r\n    //EDITAR CAMPOS\r\n    //Este useEffect actualiza en tiempo real cualquier texto que se escriba en los campos por eso su dependencia es formvalues\r\n    useEffect(() => {\r\n        dispatch(activeNote(formValues.id, {...formValues}));\r\n    }, [formValues, dispatch])\r\n    \r\n    const handleDelete = () => {\r\n        dispatch(startDeleting(id))\r\n    }\r\n    return (\r\n        <div className=\"notes__main-content\">\r\n            <NotesAppBar/>\r\n\r\n            <div className=\"notes__content\">\r\n                <input\r\n                    name=\"title\"\r\n                    type=\"text\"\r\n                    placeholder=\"Some awesome title\"\r\n                    className=\"notes__title-input\"\r\n                    autoComplete=\"off\"\r\n                    value = {title}\r\n                    onChange = {handleInputChange}\r\n                />\r\n\r\n                <textarea\r\n                    name=\"body\"\r\n                    placeholder=\"What happened today\"\r\n                    className=\"notes__textarea\"\r\n                    value = {body}\r\n                    onChange = {handleInputChange}\r\n                >\r\n                </textarea>\r\n\r\n                {\r\n                    //Si url existe entonces muestra esta sección. url viene de url.note\r\n                    url && \r\n                        (<div className=\"notes__image\">\r\n                            <img \r\n                                src={url}\r\n                                alt=\"imagen\"\r\n                            />\r\n                        </div>)\r\n                }\r\n                \r\n            </div>\r\n            <div\r\n                className= \"btn btn-danger\"\r\n                onClick = {handleDelete}    \r\n            >\r\n                Delete\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n","import React from 'react'\r\n\r\nexport const NothingSelected = () => {\r\n    return (\r\n        <div className=\"nothing__main-content\">\r\n            <p>\r\n                Select something\r\n                <br/>\r\n                or create an entry!\r\n            </p>\r\n            <i className=\"far fa-star fa-4x mt-5\"></i>\r\n        </div>\r\n    )\r\n}\r\n","import React from 'react';\r\nimport moment from 'moment';\r\nimport { useDispatch} from 'react-redux';\r\nimport { activeNote } from '../../actions/notes';\r\n\r\nexport const JournalEntry = ({id, date, title, body, url}) => {\r\n    \r\n    const noteDate = moment(date);\r\n    const dispatch = useDispatch();\r\n\r\n    const handleEntryClick = () => {\r\n        dispatch(activeNote(id, {date, title, body, url}))\r\n    }\r\n    return (\r\n        <div \r\n            className=\"journal__entry pointer animate__animated animate__fadeIn animate__faster\" \r\n            onClick={handleEntryClick}\r\n        >\r\n\r\n            {\r\n                /* Si el url existe entonces ejecuta el div*/\r\n                url &&\r\n                    <div \r\n                    className=\"journal__entry-picture\"\r\n                    style={{\r\n                        backgroundSize: 'cover',\r\n                        backgroundImage: `url(${url})`\r\n                    }}    \r\n                    >\r\n                    </div>\r\n            \r\n            }\r\n            <div className=\"journal__entry-body\">\r\n                <p className=\"journal__entry-title\">\r\n                    {title}\r\n                </p>\r\n                <p className=\"journal__entry-content\">\r\n                    {body}\r\n                </p>\r\n            </div>\r\n\r\n            <div className=\"journal__entry-date-box\">\r\n                <span>{noteDate.format('dddd')}</span>\r\n                <h4>{noteDate.format('Do')}</h4>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n","import React from 'react'\r\nimport { useSelector } from 'react-redux'\r\nimport { JournalEntry } from './JournalEntry'\r\n\r\nexport const JournalEntries = () => {\r\n\r\n    const {notes} = useSelector( state => state.notes );\r\n    return (\r\n        <div className=\"journal__entries\">\r\n            {\r\n                notes.map(note => (\r\n                    <JournalEntry \r\n                        key={note.id}\r\n                        {...note}\r\n                    />\r\n                ))\r\n            }\r\n        </div>\r\n    )\r\n}\r\n","import Swal from 'sweetalert2';\r\n\r\nimport { googleAuthProvider, firebase } from \"../firebase/firebase-config\";\r\nimport { types } from \"../types/types\"\r\nimport { noteLogout } from './notes';\r\n\r\n//Login de usuario registrado\r\nexport const startLoginEmailPassword = (email, password) => {\r\n    //Callback\r\n    return (dispatch) => {\r\n        //Pone el loading en true cuando se cumpla la petición tomará como valor false, sirve para desabilitar el botón y este no pueda ser accionado mas de una vez mientras se cumple el proceso de login.\r\n        dispatch(startLoading());\r\n\r\n        firebase.auth().signInWithEmailAndPassword(email, password)\r\n        .then(({user}) => {\r\n\r\n            //Pone el loading en false \r\n            dispatch(finishLoading());\r\n            dispatch(\r\n                login(user.uid, user.displayName)\r\n            )\r\n        })\r\n        .catch (e => {\r\n            console.log(e);\r\n            dispatch(finishLoading());\r\n            Swal.fire('Error', e.message, 'error');\r\n        })\r\n    }\r\n}\r\n\r\n//Registro de usuario en la plataforma\r\nexport const startRegisterWithEmailPasswordName = (email, password, name) => {\r\n    return (dispatch) => {\r\n        /* createUserWithEmailAndPassword propiedad de firebase para registrarse con email y password */\r\n        firebase.auth().createUserWithEmailAndPassword(email, password)\r\n        .then(async({user}) => {\r\n\r\n            /* updateprofile se utiliza debido a que al no crear la cuenta con una red social el displayName da como resultado null, espor eso que esta propieda sirve para definir el displayname y así obtener el nombre del usuario */\r\n            await user.updateProfile({displayName: name});\r\n            console.log(user);\r\n\r\n            //Después de crear la cuenta, automaticamente hace login con esta instrucción.\r\n            dispatch(\r\n                login(user.uid, user.displayName)\r\n            );\r\n        })\r\n        .catch (e => {\r\n            console.log(e);\r\n            Swal.fire('Error', e.message, 'error');\r\n        })\r\n    }\r\n}\r\n\r\nexport const startGoogleLogin = () => {\r\n    return (dispatch) => {\r\n        /* signInWithPopup propiedad de firebase para hacer login con una cuenta de red social externa */\r\n        firebase.auth().signInWithPopup(googleAuthProvider)\r\n        .then(({user}) => {\r\n            dispatch(\r\n                login(user.uid, user.displayName)\r\n            )\r\n        });\r\n    }\r\n}\r\n\r\nexport const startLogout = () => {\r\n    return async(dispatch) => {\r\n        await firebase.auth().signOut();\r\n\r\n        dispatch(logout());\r\n\r\n        //Sirve para eliminar las notas que se quedaron grabadas en el store de redux al hacer noteLogout\r\n        /* Relación con : notes.js */\r\n        dispatch(noteLogout());\r\n    }\r\n}\r\n\r\n\r\n//Action login\r\nexport const login = (uid, displayName) => ({\r\n    type: types.login,\r\n    payload: {\r\n        uid,\r\n        displayName\r\n    }\r\n})\r\n\r\n//Action logout\r\nexport const logout = () => ({\r\n    type: types.logout\r\n})\r\n\r\n//Action Start & Finish loading\r\nconst startLoading = () => ({\r\n    type: types.uiStartLoading\r\n    \r\n})\r\nconst finishLoading = () => ({\r\n    type: types.uiFinishLoading\r\n})","import React from 'react';\r\nimport { JournalEntries } from './JournalEntries';\r\nimport {useDispatch, useSelector} from 'react-redux';\r\nimport { startLogout } from '../../actions/auth';\r\nimport { startNewNote } from '../../actions/notes';\r\n\r\nexport const Sidebar = () => {\r\n    const {name} = useSelector( state => state.auth );\r\n    const dispatch = useDispatch();\r\n\r\n    const handleLogout = () => {\r\n        dispatch(startLogout());\r\n    }\r\n\r\n    const handleAddNew = () => {\r\n        dispatch(startNewNote());\r\n    }\r\n    return (\r\n        /* aside = Va a estar a un lado de la pantalla */\r\n        <aside className = \"journal__sidebar\">\r\n            <div className = \"journal__sidebar-navbar\">\r\n                <h3 className = \"mt-5\">\r\n                    <i className = \"far fa-moon\"></i>\r\n                    <span>  {name}</span>\r\n                </h3>\r\n\r\n                <button \r\n                    className = \"btn\"\r\n                    onClick = {handleLogout}\r\n                >\r\n                    Logout\r\n                </button>\r\n            </div>\r\n\r\n            <div className=\"journal__new-entry\"\r\n                onClick = {handleAddNew}\r\n            >\r\n                <i className=\"far fa-calendar-plus fa-5x\"></i>\r\n                <p className=\"mt-5\">\r\n                    New entry\r\n                </p>\r\n            </div>\r\n\r\n            <JournalEntries/>\r\n\r\n            \r\n        </aside>\r\n    )\r\n}\r\n","import React from 'react';\r\nimport { useSelector } from 'react-redux';\r\nimport { NoteScreen } from '../notes/NoteScreen';\r\nimport { NothingSelected } from './NothingSelected'\r\nimport { Sidebar } from './Sidebar';\r\n\r\nexport const JournalScreen = () => {\r\n    const {active} = useSelector( state => state.notes );\r\n    return (\r\n        <div className = \"journal__main-content animate__animated animate__fadeIn animate__faster\">\r\n            <Sidebar/>\r\n            <main>\r\n                {\r\n                    /* Determina si el active no es null, si no está vacío, cuando tenga elementos entonces se va a mostrar la pantalla de crear notas.\r\n                    */\r\n                    (active)\r\n                        ? <NoteScreen/>\r\n                        : <NothingSelected/>\r\n                }\r\n            </main>\r\n        </div>\r\n    )\r\n}\r\n","import { types } from \"../types/types\";\r\n\r\nexport const setError = (err) => ({\r\n    type: types.uiSetError,\r\n    payload: err\r\n})\r\n\r\nexport const removeError = () => ({\r\n    type: types.uiRemoveError\r\n})","import React from 'react';\r\nimport {useDispatch, useSelector} from 'react-redux';\r\nimport {Link} from 'react-router-dom';\r\nimport {useForm} from '../../hooks/useForm';\r\nimport validator from 'validator';\r\nimport { startGoogleLogin, startLoginEmailPassword} from '../../actions/auth';\r\nimport { removeError, setError } from '../../actions/ui';\r\n\r\nexport const LoginScreen = () => {\r\n\r\n    const {msgError, loading} = useSelector( state => state.ui );\r\n    //const {loading} = useSelector( state => state.auth );\r\n\r\n    //Este hook de dispatch fue creado a partir de un snipped que compartió el profesor\r\n    const dispatch = useDispatch();\r\n\r\n    //useForm\r\n    const [formValues, handleInputChange] = useForm({\r\n        email: '',\r\n        password: ''\r\n    })\r\n\r\n    const {email, password} = formValues;\r\n\r\n    //handleSubmit\r\n    const handleSubmit = (e) => {\r\n        e.preventDefault();\r\n        if(isFormValid()){\r\n            /* Desde actions/auth */\r\n            dispatch(startLoginEmailPassword(email, password));\r\n        }\r\n    }\r\n\r\n    const handleGoogleLogin = () => {\r\n        dispatch(startGoogleLogin());\r\n    }\r\n\r\n    const isFormValid = () => {\r\n        if ((email.trim().length || password.trim().length) <= 5){\r\n            dispatch(setError(\"Fill all required fields\"));\r\n            return false;\r\n        }\r\n        \r\n        if (!validator.isEmail(email)){\r\n            dispatch(setError(\"Invalid Email\"));\r\n            return false;\r\n        }\r\n\r\n        if (password.trim().length < 6 ){\r\n            dispatch(setError(\"Password should have at least 6 caharacters\"));\r\n            return false;\r\n        }\r\n\r\n        dispatch(removeError());\r\n        return true;\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <h3 className= \"auth__title\">Login</h3>\r\n            <form onSubmit= {handleSubmit} className=\"animate__animated animate__fadeIn animate__faster\">\r\n                <input\r\n                    type=\"text\"\r\n                    placeholder=\"Email\"\r\n                    name=\"email\"\r\n                    className= \"auth__input\"\r\n                    autoComplete = \"off\"\r\n                    value = {email}\r\n                    onChange = {handleInputChange}\r\n                />\r\n\r\n                <input\r\n                    type=\"password\"\r\n                    placeholder=\"Password\"\r\n                    name=\"password\"\r\n                    className= \"auth__input\"\r\n                    value = {password}\r\n                    onChange = {handleInputChange}\r\n                />\r\n                \r\n                {\r\n                    msgError &&\r\n                        <div className = \"auth__alert-error\">{msgError}</div>\r\n                }\r\n                <button\r\n                    type=\"submit\"\r\n                    className = \"btn btn-primary btn-block\"\r\n                    disabled = {loading}\r\n                >\r\n                    Login\r\n                </button>\r\n  \r\n\r\n                <div className = \"auth__social-networks\">\r\n                    <p>Login with social networks</p>\r\n                    <div \r\n                        className=\"google-btn\"\r\n                        onClick={handleGoogleLogin}\r\n                    >\r\n                        <div className=\"google-icon-wrapper\">\r\n                            <img className=\"google-icon\" src=\"https://upload.wikimedia.org/wikipedia/commons/5/53/Google_%22G%22_Logo.svg\" alt=\"google button\" />\r\n                        </div>\r\n                        <p className=\"btn-text\">\r\n                            <b>Sign in with google</b>\r\n                        </p>\r\n                    </div>\r\n                </div>\r\n\r\n                <Link\r\n                    to = \"/auth/register\"\r\n                    className = \"link\"\r\n                >\r\n                    Create new account\r\n                </Link>\r\n                \r\n            </form>\r\n        </>\r\n    )\r\n}\r\n","import React from 'react';\r\nimport {useDispatch, useSelector} from 'react-redux';\r\nimport {Link} from 'react-router-dom';\r\nimport { useForm } from '../../hooks/useForm';\r\nimport validator from 'validator';\r\nimport { removeError, setError } from '../../actions/ui';\r\nimport { startRegisterWithEmailPasswordName } from '../../actions/auth';\r\n\r\n\r\nexport const RegisterScreen = () => {\r\n\r\n    //useSelector\r\n    /* A partir de un callback llamado state hace referencia al state de redux del navegador, en este caso se requiere el ui y se desestructura para obtener directamente msgError */\r\n    const {msgError} = useSelector( state => state.ui );\r\n\r\n    //useForm\r\n    const [formValues, handleInputChange] = useForm({\r\n        name: '',\r\n        email: '',\r\n        password: '',\r\n        password2: ''\r\n    });\r\n\r\n    const {name, email, password, password2} = formValues;\r\n\r\n    //useDispatch\r\n    const dispatch = useDispatch();\r\n\r\n    //handleSubmit\r\n    const handleSubmit = (e) => {\r\n        e.preventDefault();\r\n        if(isFormValid()){\r\n            dispatch(startRegisterWithEmailPasswordName(email, password, name));            \r\n        }\r\n        \r\n    }\r\n\r\n    //FormValid\r\n    const isFormValid = () => {\r\n        if(name.trim().length === 0){\r\n            dispatch(setError('Name required'));\r\n            return false;\r\n        }\r\n        if (!validator.isEmail(email)){\r\n            dispatch(setError(\"Invalid Email\"));\r\n            return false;\r\n        }\r\n\r\n        if (password.trim().length < 6 ){\r\n            console.log(\"Password should have at least 6 caharacters\");\r\n            dispatch(setError(\"Password should have at least 6 caharacters\"));\r\n            return false;\r\n        }\r\n\r\n        if (password2.trim() !== password.trim()){\r\n            console.log(\"password doesn't match\");\r\n            dispatch(setError(\"Password doesn't match\"));\r\n            return false;\r\n        }\r\n\r\n        dispatch(removeError());\r\n        return true;\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <h3 className= \"auth__title\">Register</h3>\r\n            <form onSubmit = {handleSubmit} className=\"animate__animated animate__fadeIn animate__faster\">\r\n\r\n                <input\r\n                    type=\"text\"\r\n                    placeholder=\"Name\"\r\n                    name=\"name\"\r\n                    className= \"auth__input\"\r\n                    autoComplete = \"off\"\r\n                    value = {name}\r\n                    onChange = {handleInputChange}\r\n                />\r\n\r\n                <input\r\n                    type=\"text\"\r\n                    placeholder=\"Email\"\r\n                    name=\"email\"\r\n                    className= \"auth__input\"\r\n                    autoComplete = \"off\"\r\n                    value = {email}\r\n                    onChange = {handleInputChange}\r\n                />\r\n\r\n                <input\r\n                    type=\"password\"\r\n                    placeholder=\"Password\"\r\n                    name=\"password\"\r\n                    className= \"auth__input\"\r\n                    value = {password}\r\n                    onChange = {handleInputChange}\r\n                />\r\n\r\n                <input\r\n                    type=\"password\"\r\n                    placeholder=\"Confirm password\"\r\n                    name=\"password2\"\r\n                    className= \"auth__input\"\r\n                    value = {password2}\r\n                    onChange = {handleInputChange}\r\n                />\r\n\r\n                {/* Caja de error */}\r\n                {\r\n                    /* Si error no es null entonces.. */\r\n                    msgError && \r\n                        <div className = \"auth__alert-error\">{msgError}</div>\r\n                    \r\n                }\r\n                \r\n\r\n                <button\r\n                    type=\"submit\"\r\n                    className = \"btn btn-primary btn-block mb-5\"\r\n                >\r\n                    Register\r\n                </button>\r\n  \r\n\r\n                <Link\r\n                    to = \"/auth/login\"\r\n                    className = \"link\"\r\n                >\r\n                    Already registered?\r\n                </Link>\r\n                \r\n            </form>\r\n        </>\r\n    )\r\n}\r\n","import React from 'react';\r\nimport {\r\n    Switch,\r\n    Route,\r\n    Redirect\r\n  } from \"react-router-dom\";\r\nimport { LoginScreen } from '../components/auth/LoginScreen';\r\nimport { RegisterScreen } from '../components/auth/RegisterScreen';\r\n\r\n  //La diferencia entre con el AppRouter es que este no tiene router solamente tiene las rutas y el navbar\r\nexport const AuthRouter = () => {\r\n    return (\r\n        \r\n        <div className = \"auth__main\">\r\n            <div className = \"auth__box-container\">\r\n                <Switch>\r\n                    <Route  exact path=\"/auth/login\" component = {LoginScreen}/>                    \r\n                    <Route  exact path=\"/auth/register\" component = {RegisterScreen}/>\r\n                    \r\n\r\n                    <Redirect to = \"/auth/login\"/>                                        \r\n                </Switch>\r\n            </div>\r\n        </div>\r\n    )\r\n}","import React from 'react';\r\nimport { Redirect, Route } from 'react-router';\r\nimport PropTypes from 'prop-types';\r\n//Component es el componente que se quiere renderizar como por ejemplo el de login el navbar etc\r\n/* ...rest se refiere al resto de los elementos y va a ser llamado como ...props en el componente*/\r\n\r\n/* Sintaxis de el nombre component debe ser con C mayuscula en caso de no referirnos a la etiqueta html <component>  */\r\n\r\nexport const PrivateRoute = ({\r\n    isAuthenticated,\r\n    component: Component,\r\n    /* En los argumentos este ...rest no funciona como spread */\r\n    /* El path ='/' es parte de este rest  */\r\n    ...rest\r\n}) => {\r\n    \r\n    return (\r\n        <Route {...rest}\r\n            /* La arrow function es con parentesis porque retorna algo */\r\n            /* props es un callback que hace referencia a los props del componente que son el history location etc */\r\n            component = {(props) => (\r\n                (isAuthenticated)\r\n                    /* Aquí ...props funciona como spread */\r\n                    ? (<Component {...props}/>)\r\n                    :(<Redirect to='/auth/login'/>)\r\n            )}/>\r\n    )\r\n}\r\n\r\nPrivateRoute.propTypes = {\r\n    isAuthenticated: PropTypes.bool.isRequired,\r\n    component: PropTypes.func.isRequired\r\n}","import React from 'react';\r\nimport { Redirect, Route } from 'react-router';\r\nimport PropTypes from 'prop-types';\r\n\r\nexport const PublicRoute = ({\r\n    isAuthenticated,\r\n    component: Component,\r\n    ...rest\r\n}) => {\r\n       \r\n    return (\r\n        <Route {...rest}\r\n                component = {(props) => (\r\n                (isAuthenticated)\r\n                    ? (<Redirect to='/'/>)\r\n                    :(<Component {...props}/>)\r\n            )}/>\r\n    )\r\n}\r\n\r\nPublicRoute.propTypes = {\r\n    isAuthenticated: PropTypes.bool.isRequired,\r\n    component: PropTypes.func.isRequired\r\n}","import React, { useEffect, useState } from 'react'\r\nimport { useDispatch } from 'react-redux';\r\nimport {\r\n    BrowserRouter as Router,  //Antes era BrowserRouter pero para evitar el error 404 al recargar la página en netliify se cambió el nombre a este.\r\n    Switch,\r\n    Redirect\r\n} from 'react-router-dom';\r\nimport {firebase} from '../firebase/firebase-config';\r\n\r\nimport { JournalScreen } from '../components/journal/JournalScreen';\r\nimport { AuthRouter } from './AuthRouter';\r\nimport { login } from '../actions/auth';\r\nimport { PrivateRoute } from './PrivateRoute';\r\nimport { PublicRoute } from './PublicRoute';\r\nimport { startLoadingNotes } from '../actions/notes';\r\n\r\n\r\nexport const AppRouter = () => {\r\n\r\n    //State que determina si aparece una pantalla de carga cuando se recargue la página o cuando se esté haciendo loggin\r\n    const [checking, setChecking] = useState(true);\r\n    //Determina si está logueado o no \r\n    const [isLoggedin, setIsLoggedin] = useState(false);\r\n\r\n    const dispatch = useDispatch();\r\n    \r\n\r\n/* Este useEffect se utiliza prácticamente para impedir que nuestro estado de autenticación se borre del auth que creamos con Redux, esto no pasa con firebase ya que conoce bien que el usuario ya se atenticó  */\r\n    useEffect(() => {\r\n        //El useEffect en sus dependencias  ignorar el dispatch ya que ese no influye en el effect\r\n        \r\n        /* Con esta instrución del firebase se van a capturar los datos de autenticación y se van a mantener incluso si el usuario refresca la página, también se actualiza si cambió de cuenta para autenticarse\r\n        \r\n        ya que onAuthStateChanged maneja un tipo de objeto especial llamado observable que se dispara cada que existe algun cambio de actualización en la página.\r\n        */\r\n        firebase.auth().onAuthStateChanged((user) => {\r\n            /* if el objeto user no es null (contiene algo) entonces pregunta si existe el uid */\r\n            if (user?.uid) {\r\n                dispatch( login(user.uid, user.displayName));\r\n                /*Obtiene la info de las notas del user y la almaena en un arreglo llamado notes */\r\n                dispatch(startLoadingNotes(user.uid))\r\n                setIsLoggedin(true);\r\n            }else {\r\n                setIsLoggedin(false);\r\n            }\r\n\r\n            //Cuando ya se hizo autenticación entonces deja de mostrar la carga\r\n            setChecking(false);\r\n        });\r\n\r\n        //Actualmente este dispatch no cambia pero react nos pide para evitar errores o warnings\r\n    }, [dispatch, setChecking, setIsLoggedin])\r\n\r\n    if (checking){\r\n        return (\r\n            <h1>Cargando...</h1>\r\n        )\r\n    }\r\n    return (\r\n        <Router>\r\n            <div>\r\n                <Switch>\r\n                    <PublicRoute \r\n                        path=\"/auth\" \r\n                        component = {AuthRouter}\r\n                        isAuthenticated = {isLoggedin}\r\n                    />\r\n                        \r\n                    {/* El path es parte del ...rest de PrivateRoute */}\r\n                    {/* En el localStorage guarda el pathname del rest de la respectiva ruta del DashBoard */}\r\n                    <PrivateRoute\r\n                         \r\n                        path=\"/\" \r\n                        component = {JournalScreen}\r\n                        isAuthenticated = {isLoggedin}   \r\n                    />\r\n\r\n                    <Redirect to = \"/auth/login\"/>                                    \r\n                </Switch>\r\n            </div>\r\n        </Router>\r\n    )\r\n}","import { types } from \"../types/types\";\r\n\r\nconst initialState = {\r\n    loading: false,\r\n    msgError: null\r\n}\r\n\r\nexport const uiReducer = (state = initialState, action) => {\r\n    switch (action.type) {\r\n        case types.uiSetError:\r\n            return {\r\n                //Toma todo el state como se encuentre en ese momento para que no existan mutaciones en este\r\n                ...state,\r\n                msgError: action.payload\r\n            }\r\n\r\n        case types.uiRemoveError:\r\n            return {\r\n                ...state,\r\n                msgError: null\r\n            }\r\n\r\n        /* Loading */\r\n        case types.uiStartLoading:\r\n            return {\r\n                ...state,\r\n                loading: true\r\n            }\r\n        \r\n        case types.uiFinishLoading:\r\n            return {\r\n                ...state,\r\n                loading: false\r\n            }\r\n        default:\r\n            return state;\r\n    }\r\n\r\n}","import { types } from \"../types/types\";\r\n\r\n/* \r\n    active: null\r\n    notes: []\r\n\r\n*/\r\nconst initialState = {\r\n    notes: [],\r\n    active: null\r\n}\r\n\r\nexport const notesReducer = (state = initialState, action) => {\r\n    switch (action.type) {\r\n        case types.notesActive:\r\n            return {\r\n                ...state,\r\n                /* podría ser active: ...action.payload pero también se puede escribir de esta forma la sintáxis */\r\n                active: {\r\n                    /* obtiene todos los elementos dentro del payload */\r\n                    ...action.payload\r\n                }\r\n            }\r\n    \r\n        /*Al crear una note, que esta aparezca automáticamente en la sección de minicards al guardar y no tener que recargar la página.  */\r\n        case types.notesAddNew:\r\n            return {\r\n                ...state,\r\n                /* crea la minicard de la nota con action.payload y después vuelve a imprimir todas las minicards de notas que ya estaban con ...state.notes ubicando la nueva nota al inicio  */\r\n                notes: [action.payload, ...state.notes]\r\n            }\r\n\r\n        case types.notesLoad:\r\n            return {\r\n                ...state,\r\n                notes: [...action.payload]\r\n            }\r\n        \r\n        //Va a actualizar la información de las notas pequeñas del panel lateral\r\n        case types.notesUpdated:\r\n            return {\r\n                ...state,\r\n                notes: state.notes.map(\r\n                    note => note.id === action.payload.id\r\n                        ? action.payload.note /* Este note no tiene que ver con el callback note del map si no del note de la action de notes.js */\r\n                        : note //de otro modo será la misma nota\r\n                )\r\n            }\r\n\r\n        //Elimina nota por nota\r\n        case types.notesDelete:\r\n            return {\r\n                ...state,\r\n                active: null,\r\n                // Filtra todas las notas que sean diferentes al id de la nota que se eligió para eliminarse\r\n                notes: state.notes.filter(note => note.id !== action.payload)\r\n            }\r\n\r\n        //Purga notas al hacer Logout (las quita del store)\r\n        case types.notesLogoutCleaning:\r\n            return {\r\n                /* Esta es una forma de hacerlo */ \r\n                //state: initialState\r\n\r\n                ...state, //Por si acaso no queremos perder algo\r\n                active: null,\r\n                notes: []\r\n            }\r\n\r\n        default:\r\n            return state;\r\n    }\r\n}","import {createStore, combineReducers, applyMiddleware, compose} from 'redux';\r\nimport { authReducer } from '../reducers/authReducer';\r\nimport { uiReducer } from '../reducers/uiReducer';\r\nimport thunk from 'redux-thunk';\r\nimport { notesReducer } from '../reducers/notesReducer';\r\n/* \r\nSe crea un createStore el cual recibe las acciones para devolver un reducer.\r\ncombineReducers: Debido a que el createStore únicamente recibe un sólo reducer con el combineReducers hacemos que reciba más de uno. */\r\n\r\nconst reducers = combineReducers({\r\n    auth: authReducer,\r\n    ui: uiReducer,\r\n    notes: notesReducer\r\n});\r\n\r\nconst composeEnhancers = (typeof window !== 'undefined' && window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__) || compose;\r\n\r\n\r\nexport const store = createStore(\r\n    reducers,\r\n    composeEnhancers(\r\n        applyMiddleware(thunk)\r\n    )\r\n);","import { types } from \"../types/types\";\r\n\r\n\r\nexport const authReducer = (state = {}, action) => {\r\n    switch (action.type) {\r\n        case types.login:\r\n            /* es payload.uid y payload.displayname debido a que en la action payload es un objeto con más de un elemento sin únicamente tuviera un elemento entonces sería action.payload */\r\n            return {\r\n                /* uid y name aaprecen en Redux cuando el usuario se autentica */\r\n                uid: action.payload.uid,\r\n                name: action.payload.displayName\r\n            }\r\n        \r\n            /* Devuelve un objeto vacío porque se está haciendo logout */\r\n        case types.logout:\r\n            return { }\r\n\r\n        default:\r\n            return state;\r\n    }\r\n}","import React from 'react'\r\nimport {Provider} from 'react-redux'\r\nimport { AppRouter } from './routers/AppRouter'\r\nimport { store } from './store/store'\r\n\r\nexport const JournalApp = () => {\r\n    return (\r\n        <Provider store={store}>\r\n            <AppRouter/> \r\n        </Provider>       \r\n    )\r\n}\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { JournalApp } from './JournalApp';\nimport './styles/styles.scss';\n\nReactDOM.render(\n    <JournalApp />,\n  document.getElementById('root')\n);\n\n"],"sourceRoot":""}